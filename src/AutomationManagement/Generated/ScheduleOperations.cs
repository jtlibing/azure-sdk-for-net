// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure;
using Microsoft.Azure.Management.Automation;
using Microsoft.Azure.Management.Automation.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Automation
{
    /// <summary>
    /// Service operation for automation schedules.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    internal partial class ScheduleOperations : IServiceOperations<AutomationManagementClient>, IScheduleOperations
    {
        /// <summary>
        /// Initializes a new instance of the ScheduleOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ScheduleOperations(AutomationManagementClient client)
        {
            this._client = client;
        }
        
        private AutomationManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Automation.AutomationManagementClient.
        /// </summary>
        public AutomationManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Create a schedule.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the create schedule operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the create schedule operation.
        /// </returns>
        public async Task<ScheduleCreateResponse> CreateAsync(string automationAccount, ScheduleCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Schedule == null)
            {
                throw new ArgumentNullException("parameters.Schedule");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/OaaSCS/resources/";
            url = url + "automation";
            url = url + "/~/Accounts/";
            url = url + Uri.EscapeDataString(automationAccount);
            url = url + "/Schedules";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-03-13_Preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("MaxDataServiceVersion", "3.0");
                httpRequest.Headers.Add("MinDataServiceVersion", "3.0");
                httpRequest.Headers.Add("x-ms-version", "2013-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject scheduleCreateParametersValue = new JObject();
                requestDoc = scheduleCreateParametersValue;
                
                if (parameters.Schedule.Id != null)
                {
                    scheduleCreateParametersValue["ScheduleID"] = parameters.Schedule.Id;
                }
                
                if (parameters.Schedule.AccountId != null)
                {
                    scheduleCreateParametersValue["AccountID"] = parameters.Schedule.AccountId;
                }
                
                if (parameters.Schedule.Name != null)
                {
                    scheduleCreateParametersValue["Name"] = parameters.Schedule.Name;
                }
                
                if (parameters.Schedule.Description != null)
                {
                    scheduleCreateParametersValue["Description"] = parameters.Schedule.Description;
                }
                
                scheduleCreateParametersValue["StartTime"] = parameters.Schedule.StartTime;
                
                scheduleCreateParametersValue["ExpiryTime"] = parameters.Schedule.ExpiryTime;
                
                scheduleCreateParametersValue["CreationTime"] = parameters.Schedule.CreationTime;
                
                scheduleCreateParametersValue["LastModifiedTime"] = parameters.Schedule.LastModifiedTime;
                
                scheduleCreateParametersValue["IsEnabled"] = parameters.Schedule.IsEnabled;
                
                if (parameters.Schedule.NextRun != null)
                {
                    scheduleCreateParametersValue["NextRun"] = parameters.Schedule.NextRun.Value;
                }
                
                if (parameters.Schedule.DayInterval != null)
                {
                    scheduleCreateParametersValue["DayInterval"] = parameters.Schedule.DayInterval.Value;
                }
                
                if (parameters.Schedule.HourInterval != null)
                {
                    scheduleCreateParametersValue["HourInterval"] = parameters.Schedule.HourInterval.Value;
                }
                
                scheduleCreateParametersValue["odata.type"] = parameters.Schedule.ScheduleType.ToString();
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ScheduleCreateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ScheduleCreateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Schedule scheduleInstance = new Schedule();
                            result.Schedule = scheduleInstance;
                            
                            JToken scheduleIDValue = responseDoc["ScheduleID"];
                            if (scheduleIDValue != null && scheduleIDValue.Type != JTokenType.Null)
                            {
                                string scheduleIDInstance = ((string)scheduleIDValue);
                                scheduleInstance.Id = scheduleIDInstance;
                            }
                            
                            JToken accountIDValue = responseDoc["AccountID"];
                            if (accountIDValue != null && accountIDValue.Type != JTokenType.Null)
                            {
                                string accountIDInstance = ((string)accountIDValue);
                                scheduleInstance.AccountId = accountIDInstance;
                            }
                            
                            JToken nameValue = responseDoc["Name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                scheduleInstance.Name = nameInstance;
                            }
                            
                            JToken descriptionValue = responseDoc["Description"];
                            if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                            {
                                string descriptionInstance = ((string)descriptionValue);
                                scheduleInstance.Description = descriptionInstance;
                            }
                            
                            JToken startTimeValue = responseDoc["StartTime"];
                            if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                            {
                                DateTime startTimeInstance = ((DateTime)startTimeValue);
                                scheduleInstance.StartTime = startTimeInstance;
                            }
                            
                            JToken expiryTimeValue = responseDoc["ExpiryTime"];
                            if (expiryTimeValue != null && expiryTimeValue.Type != JTokenType.Null)
                            {
                                DateTime expiryTimeInstance = ((DateTime)expiryTimeValue);
                                scheduleInstance.ExpiryTime = expiryTimeInstance;
                            }
                            
                            JToken creationTimeValue = responseDoc["CreationTime"];
                            if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                            {
                                DateTime creationTimeInstance = ((DateTime)creationTimeValue);
                                scheduleInstance.CreationTime = creationTimeInstance;
                            }
                            
                            JToken lastModifiedTimeValue = responseDoc["LastModifiedTime"];
                            if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                            {
                                DateTime lastModifiedTimeInstance = ((DateTime)lastModifiedTimeValue);
                                scheduleInstance.LastModifiedTime = lastModifiedTimeInstance;
                            }
                            
                            JToken isEnabledValue = responseDoc["IsEnabled"];
                            if (isEnabledValue != null && isEnabledValue.Type != JTokenType.Null)
                            {
                                bool isEnabledInstance = ((bool)isEnabledValue);
                                scheduleInstance.IsEnabled = isEnabledInstance;
                            }
                            
                            JToken nextRunValue = responseDoc["NextRun"];
                            if (nextRunValue != null && nextRunValue.Type != JTokenType.Null)
                            {
                                DateTime nextRunInstance = ((DateTime)nextRunValue);
                                scheduleInstance.NextRun = nextRunInstance;
                            }
                            
                            JToken dayIntervalValue = responseDoc["DayInterval"];
                            if (dayIntervalValue != null && dayIntervalValue.Type != JTokenType.Null)
                            {
                                int dayIntervalInstance = ((int)dayIntervalValue);
                                scheduleInstance.DayInterval = dayIntervalInstance;
                            }
                            
                            JToken hourIntervalValue = responseDoc["HourInterval"];
                            if (hourIntervalValue != null && hourIntervalValue.Type != JTokenType.Null)
                            {
                                int hourIntervalInstance = ((int)hourIntervalValue);
                                scheduleInstance.HourInterval = hourIntervalInstance;
                            }
                            
                            JToken odatatypeValue = responseDoc["odata.type"];
                            if (odatatypeValue != null && odatatypeValue.Type != JTokenType.Null)
                            {
                                string odatatypeInstance = ((string)odatatypeValue);
                                scheduleInstance.ScheduleType = odatatypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Delete the schedule identified by scheduleId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='scheduleId'>
        /// Required. The schedule id.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string automationAccount, string scheduleId, CancellationToken cancellationToken)
        {
            // Validate
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            if (scheduleId == null)
            {
                throw new ArgumentNullException("scheduleId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("scheduleId", scheduleId);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/OaaSCS/resources/";
            url = url + "automation";
            url = url + "/~/Accounts/";
            url = url + Uri.EscapeDataString(automationAccount);
            url = url + "/Schedules(guid'";
            url = url + Uri.EscapeDataString(scheduleId);
            url = url + "')";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-03-13_Preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("MaxDataServiceVersion", "3.0");
                httpRequest.Headers.Add("MinDataServiceVersion", "3.0");
                httpRequest.Headers.Add("x-ms-version", "2013-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieve the schedule identified by scheduleId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='scheduleId'>
        /// Required. The schedule id.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the get schedule operation.
        /// </returns>
        public async Task<ScheduleGetResponse> GetAsync(string automationAccount, string scheduleId, CancellationToken cancellationToken)
        {
            // Validate
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            if (scheduleId == null)
            {
                throw new ArgumentNullException("scheduleId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("scheduleId", scheduleId);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/OaaSCS/resources/";
            url = url + "automation";
            url = url + "/~/Accounts/";
            url = url + Uri.EscapeDataString(automationAccount);
            url = url + "/Schedules(guid'";
            url = url + Uri.EscapeDataString(scheduleId);
            url = url + "')";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-03-13_Preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("MaxDataServiceVersion", "3.0");
                httpRequest.Headers.Add("MinDataServiceVersion", "3.0");
                httpRequest.Headers.Add("x-ms-version", "2013-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ScheduleGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ScheduleGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Schedule scheduleInstance = new Schedule();
                            result.Schedule = scheduleInstance;
                            
                            JToken scheduleIDValue = responseDoc["ScheduleID"];
                            if (scheduleIDValue != null && scheduleIDValue.Type != JTokenType.Null)
                            {
                                string scheduleIDInstance = ((string)scheduleIDValue);
                                scheduleInstance.Id = scheduleIDInstance;
                            }
                            
                            JToken accountIDValue = responseDoc["AccountID"];
                            if (accountIDValue != null && accountIDValue.Type != JTokenType.Null)
                            {
                                string accountIDInstance = ((string)accountIDValue);
                                scheduleInstance.AccountId = accountIDInstance;
                            }
                            
                            JToken nameValue = responseDoc["Name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                scheduleInstance.Name = nameInstance;
                            }
                            
                            JToken descriptionValue = responseDoc["Description"];
                            if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                            {
                                string descriptionInstance = ((string)descriptionValue);
                                scheduleInstance.Description = descriptionInstance;
                            }
                            
                            JToken startTimeValue = responseDoc["StartTime"];
                            if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                            {
                                DateTime startTimeInstance = ((DateTime)startTimeValue);
                                scheduleInstance.StartTime = startTimeInstance;
                            }
                            
                            JToken expiryTimeValue = responseDoc["ExpiryTime"];
                            if (expiryTimeValue != null && expiryTimeValue.Type != JTokenType.Null)
                            {
                                DateTime expiryTimeInstance = ((DateTime)expiryTimeValue);
                                scheduleInstance.ExpiryTime = expiryTimeInstance;
                            }
                            
                            JToken creationTimeValue = responseDoc["CreationTime"];
                            if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                            {
                                DateTime creationTimeInstance = ((DateTime)creationTimeValue);
                                scheduleInstance.CreationTime = creationTimeInstance;
                            }
                            
                            JToken lastModifiedTimeValue = responseDoc["LastModifiedTime"];
                            if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                            {
                                DateTime lastModifiedTimeInstance = ((DateTime)lastModifiedTimeValue);
                                scheduleInstance.LastModifiedTime = lastModifiedTimeInstance;
                            }
                            
                            JToken isEnabledValue = responseDoc["IsEnabled"];
                            if (isEnabledValue != null && isEnabledValue.Type != JTokenType.Null)
                            {
                                bool isEnabledInstance = ((bool)isEnabledValue);
                                scheduleInstance.IsEnabled = isEnabledInstance;
                            }
                            
                            JToken nextRunValue = responseDoc["NextRun"];
                            if (nextRunValue != null && nextRunValue.Type != JTokenType.Null)
                            {
                                DateTime nextRunInstance = ((DateTime)nextRunValue);
                                scheduleInstance.NextRun = nextRunInstance;
                            }
                            
                            JToken dayIntervalValue = responseDoc["DayInterval"];
                            if (dayIntervalValue != null && dayIntervalValue.Type != JTokenType.Null)
                            {
                                int dayIntervalInstance = ((int)dayIntervalValue);
                                scheduleInstance.DayInterval = dayIntervalInstance;
                            }
                            
                            JToken hourIntervalValue = responseDoc["HourInterval"];
                            if (hourIntervalValue != null && hourIntervalValue.Type != JTokenType.Null)
                            {
                                int hourIntervalInstance = ((int)hourIntervalValue);
                                scheduleInstance.HourInterval = hourIntervalInstance;
                            }
                            
                            JToken odatatypeValue = responseDoc["odata.type"];
                            if (odatatypeValue != null && odatatypeValue.Type != JTokenType.Null)
                            {
                                string odatatypeInstance = ((string)odatatypeValue);
                                scheduleInstance.ScheduleType = odatatypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieve a list of schedules for the given automation account.
        /// (see http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='skipToken'>
        /// Optional. The skip token.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list schedule operation.
        /// </returns>
        public async Task<ScheduleListResponse> ListAsync(string automationAccount, string skipToken, CancellationToken cancellationToken)
        {
            // Validate
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("skipToken", skipToken);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/OaaSCS/resources/";
            url = url + "automation";
            url = url + "/~/Accounts/";
            url = url + Uri.EscapeDataString(automationAccount);
            url = url + "/Schedules";
            List<string> queryParameters = new List<string>();
            if (skipToken != null)
            {
                queryParameters.Add("$skiptoken=" + Uri.EscapeDataString(skipToken));
            }
            queryParameters.Add("api-version=2014-03-13_Preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("MaxDataServiceVersion", "3.0");
                httpRequest.Headers.Add("MinDataServiceVersion", "3.0");
                httpRequest.Headers.Add("x-ms-version", "2013-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ScheduleListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ScheduleListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Schedule scheduleInstance = new Schedule();
                                    result.Schedules.Add(scheduleInstance);
                                    
                                    JToken scheduleIDValue = valueValue["ScheduleID"];
                                    if (scheduleIDValue != null && scheduleIDValue.Type != JTokenType.Null)
                                    {
                                        string scheduleIDInstance = ((string)scheduleIDValue);
                                        scheduleInstance.Id = scheduleIDInstance;
                                    }
                                    
                                    JToken accountIDValue = valueValue["AccountID"];
                                    if (accountIDValue != null && accountIDValue.Type != JTokenType.Null)
                                    {
                                        string accountIDInstance = ((string)accountIDValue);
                                        scheduleInstance.AccountId = accountIDInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["Name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        scheduleInstance.Name = nameInstance;
                                    }
                                    
                                    JToken descriptionValue = valueValue["Description"];
                                    if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance = ((string)descriptionValue);
                                        scheduleInstance.Description = descriptionInstance;
                                    }
                                    
                                    JToken startTimeValue = valueValue["StartTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        scheduleInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken expiryTimeValue = valueValue["ExpiryTime"];
                                    if (expiryTimeValue != null && expiryTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime expiryTimeInstance = ((DateTime)expiryTimeValue);
                                        scheduleInstance.ExpiryTime = expiryTimeInstance;
                                    }
                                    
                                    JToken creationTimeValue = valueValue["CreationTime"];
                                    if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime creationTimeInstance = ((DateTime)creationTimeValue);
                                        scheduleInstance.CreationTime = creationTimeInstance;
                                    }
                                    
                                    JToken lastModifiedTimeValue = valueValue["LastModifiedTime"];
                                    if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime lastModifiedTimeInstance = ((DateTime)lastModifiedTimeValue);
                                        scheduleInstance.LastModifiedTime = lastModifiedTimeInstance;
                                    }
                                    
                                    JToken isEnabledValue = valueValue["IsEnabled"];
                                    if (isEnabledValue != null && isEnabledValue.Type != JTokenType.Null)
                                    {
                                        bool isEnabledInstance = ((bool)isEnabledValue);
                                        scheduleInstance.IsEnabled = isEnabledInstance;
                                    }
                                    
                                    JToken nextRunValue = valueValue["NextRun"];
                                    if (nextRunValue != null && nextRunValue.Type != JTokenType.Null)
                                    {
                                        DateTime nextRunInstance = ((DateTime)nextRunValue);
                                        scheduleInstance.NextRun = nextRunInstance;
                                    }
                                    
                                    JToken dayIntervalValue = valueValue["DayInterval"];
                                    if (dayIntervalValue != null && dayIntervalValue.Type != JTokenType.Null)
                                    {
                                        int dayIntervalInstance = ((int)dayIntervalValue);
                                        scheduleInstance.DayInterval = dayIntervalInstance;
                                    }
                                    
                                    JToken hourIntervalValue = valueValue["HourInterval"];
                                    if (hourIntervalValue != null && hourIntervalValue.Type != JTokenType.Null)
                                    {
                                        int hourIntervalInstance = ((int)hourIntervalValue);
                                        scheduleInstance.HourInterval = hourIntervalInstance;
                                    }
                                    
                                    JToken odatatypeValue = valueValue["odata.type"];
                                    if (odatatypeValue != null && odatatypeValue.Type != JTokenType.Null)
                                    {
                                        string odatatypeInstance = ((string)odatatypeValue);
                                        scheduleInstance.ScheduleType = odatatypeInstance;
                                    }
                                }
                            }
                            
                            JToken odatanextLinkValue = responseDoc["odata.nextLink"];
                            if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                            {
                                string odatanextLinkInstance = Regex.Match(((string)odatanextLinkValue), "^.*[&\\?]\\$skiptoken=([^&]*)(&.*)?").Groups[1].Value;
                                result.SkipToken = odatanextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieve a list of one schedule identified by scheduleName.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='scheduleName'>
        /// Required. The schedule name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list schedule operation.
        /// </returns>
        public async Task<ScheduleListResponse> ListByNameAsync(string automationAccount, string scheduleName, CancellationToken cancellationToken)
        {
            // Validate
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            if (scheduleName == null)
            {
                throw new ArgumentNullException("scheduleName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("scheduleName", scheduleName);
                TracingAdapter.Enter(invocationId, this, "ListByNameAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/OaaSCS/resources/";
            url = url + "automation";
            url = url + "/~/Accounts/";
            url = url + Uri.EscapeDataString(automationAccount);
            url = url + "/Schedules";
            List<string> queryParameters = new List<string>();
            List<string> odataFilter = new List<string>();
            odataFilter.Add("Name eq '" + Uri.EscapeDataString(scheduleName) + "'");
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            queryParameters.Add("api-version=2014-03-13_Preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("MaxDataServiceVersion", "3.0");
                httpRequest.Headers.Add("MinDataServiceVersion", "3.0");
                httpRequest.Headers.Add("x-ms-version", "2013-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ScheduleListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ScheduleListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Schedule scheduleInstance = new Schedule();
                                    result.Schedules.Add(scheduleInstance);
                                    
                                    JToken scheduleIDValue = valueValue["ScheduleID"];
                                    if (scheduleIDValue != null && scheduleIDValue.Type != JTokenType.Null)
                                    {
                                        string scheduleIDInstance = ((string)scheduleIDValue);
                                        scheduleInstance.Id = scheduleIDInstance;
                                    }
                                    
                                    JToken accountIDValue = valueValue["AccountID"];
                                    if (accountIDValue != null && accountIDValue.Type != JTokenType.Null)
                                    {
                                        string accountIDInstance = ((string)accountIDValue);
                                        scheduleInstance.AccountId = accountIDInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["Name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        scheduleInstance.Name = nameInstance;
                                    }
                                    
                                    JToken descriptionValue = valueValue["Description"];
                                    if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance = ((string)descriptionValue);
                                        scheduleInstance.Description = descriptionInstance;
                                    }
                                    
                                    JToken startTimeValue = valueValue["StartTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        scheduleInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken expiryTimeValue = valueValue["ExpiryTime"];
                                    if (expiryTimeValue != null && expiryTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime expiryTimeInstance = ((DateTime)expiryTimeValue);
                                        scheduleInstance.ExpiryTime = expiryTimeInstance;
                                    }
                                    
                                    JToken creationTimeValue = valueValue["CreationTime"];
                                    if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime creationTimeInstance = ((DateTime)creationTimeValue);
                                        scheduleInstance.CreationTime = creationTimeInstance;
                                    }
                                    
                                    JToken lastModifiedTimeValue = valueValue["LastModifiedTime"];
                                    if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime lastModifiedTimeInstance = ((DateTime)lastModifiedTimeValue);
                                        scheduleInstance.LastModifiedTime = lastModifiedTimeInstance;
                                    }
                                    
                                    JToken isEnabledValue = valueValue["IsEnabled"];
                                    if (isEnabledValue != null && isEnabledValue.Type != JTokenType.Null)
                                    {
                                        bool isEnabledInstance = ((bool)isEnabledValue);
                                        scheduleInstance.IsEnabled = isEnabledInstance;
                                    }
                                    
                                    JToken nextRunValue = valueValue["NextRun"];
                                    if (nextRunValue != null && nextRunValue.Type != JTokenType.Null)
                                    {
                                        DateTime nextRunInstance = ((DateTime)nextRunValue);
                                        scheduleInstance.NextRun = nextRunInstance;
                                    }
                                    
                                    JToken dayIntervalValue = valueValue["DayInterval"];
                                    if (dayIntervalValue != null && dayIntervalValue.Type != JTokenType.Null)
                                    {
                                        int dayIntervalInstance = ((int)dayIntervalValue);
                                        scheduleInstance.DayInterval = dayIntervalInstance;
                                    }
                                    
                                    JToken hourIntervalValue = valueValue["HourInterval"];
                                    if (hourIntervalValue != null && hourIntervalValue.Type != JTokenType.Null)
                                    {
                                        int hourIntervalInstance = ((int)hourIntervalValue);
                                        scheduleInstance.HourInterval = hourIntervalInstance;
                                    }
                                    
                                    JToken odatatypeValue = valueValue["odata.type"];
                                    if (odatatypeValue != null && odatatypeValue.Type != JTokenType.Null)
                                    {
                                        string odatatypeInstance = ((string)odatatypeValue);
                                        scheduleInstance.ScheduleType = odatatypeInstance;
                                    }
                                }
                            }
                            
                            JToken odatanextLinkValue = responseDoc["odata.nextLink"];
                            if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                            {
                                string odatanextLinkInstance = Regex.Match(((string)odatanextLinkValue), "^.*[&\\?]\\$skiptoken=([^&]*)(&.*)?").Groups[1].Value;
                                result.SkipToken = odatanextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Update the schedule identified by scheduleId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the update schedule operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> UpdateAsync(string automationAccount, ScheduleUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Schedule == null)
            {
                throw new ArgumentNullException("parameters.Schedule");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/OaaSCS/resources/";
            url = url + "automation";
            url = url + "/~/Accounts/";
            url = url + Uri.EscapeDataString(automationAccount);
            url = url + "/Schedules(guid'";
            if (parameters.Schedule.Id != null)
            {
                url = url + Uri.EscapeDataString(parameters.Schedule.Id);
            }
            url = url + "')";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-03-13_Preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("MaxDataServiceVersion", "3.0");
                httpRequest.Headers.Add("MinDataServiceVersion", "3.0");
                httpRequest.Headers.Add("x-ms-version", "2013-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject scheduleUpdateParametersValue = new JObject();
                requestDoc = scheduleUpdateParametersValue;
                
                if (parameters.Schedule.Id != null)
                {
                    scheduleUpdateParametersValue["ScheduleID"] = parameters.Schedule.Id;
                }
                
                if (parameters.Schedule.AccountId != null)
                {
                    scheduleUpdateParametersValue["AccountID"] = parameters.Schedule.AccountId;
                }
                
                if (parameters.Schedule.Name != null)
                {
                    scheduleUpdateParametersValue["Name"] = parameters.Schedule.Name;
                }
                
                if (parameters.Schedule.Description != null)
                {
                    scheduleUpdateParametersValue["Description"] = parameters.Schedule.Description;
                }
                
                scheduleUpdateParametersValue["StartTime"] = parameters.Schedule.StartTime;
                
                scheduleUpdateParametersValue["ExpiryTime"] = parameters.Schedule.ExpiryTime;
                
                scheduleUpdateParametersValue["CreationTime"] = parameters.Schedule.CreationTime;
                
                scheduleUpdateParametersValue["LastModifiedTime"] = parameters.Schedule.LastModifiedTime;
                
                scheduleUpdateParametersValue["IsEnabled"] = parameters.Schedule.IsEnabled;
                
                if (parameters.Schedule.NextRun != null)
                {
                    scheduleUpdateParametersValue["NextRun"] = parameters.Schedule.NextRun.Value;
                }
                
                if (parameters.Schedule.DayInterval != null)
                {
                    scheduleUpdateParametersValue["DayInterval"] = parameters.Schedule.DayInterval.Value;
                }
                
                if (parameters.Schedule.HourInterval != null)
                {
                    scheduleUpdateParametersValue["HourInterval"] = parameters.Schedule.HourInterval.Value;
                }
                
                scheduleUpdateParametersValue["odata.type"] = parameters.Schedule.ScheduleType.ToString();
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
