// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.Azure.Management.Automation;
using Microsoft.Azure.Management.Automation.Models;

namespace Microsoft.Azure.Management.Automation
{
    public static partial class ScheduleOperationsExtensions
    {
        /// <summary>
        /// Create a schedule.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IScheduleOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the create schedule operation.
        /// </param>
        /// <returns>
        /// The response model for the create schedule operation.
        /// </returns>
        public static ScheduleCreateResponse Create(this IScheduleOperations operations, string automationAccount, ScheduleCreateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IScheduleOperations)s).CreateAsync(automationAccount, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Create a schedule.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IScheduleOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the create schedule operation.
        /// </param>
        /// <returns>
        /// The response model for the create schedule operation.
        /// </returns>
        public static Task<ScheduleCreateResponse> CreateAsync(this IScheduleOperations operations, string automationAccount, ScheduleCreateParameters parameters)
        {
            return operations.CreateAsync(automationAccount, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Delete the schedule identified by scheduleId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IScheduleOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='scheduleId'>
        /// Required. The schedule id.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Delete(this IScheduleOperations operations, string automationAccount, string scheduleId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IScheduleOperations)s).DeleteAsync(automationAccount, scheduleId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Delete the schedule identified by scheduleId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IScheduleOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='scheduleId'>
        /// Required. The schedule id.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> DeleteAsync(this IScheduleOperations operations, string automationAccount, string scheduleId)
        {
            return operations.DeleteAsync(automationAccount, scheduleId, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieve the schedule identified by scheduleId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IScheduleOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='scheduleId'>
        /// Required. The schedule id.
        /// </param>
        /// <returns>
        /// The response model for the get schedule operation.
        /// </returns>
        public static ScheduleGetResponse Get(this IScheduleOperations operations, string automationAccount, string scheduleId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IScheduleOperations)s).GetAsync(automationAccount, scheduleId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieve the schedule identified by scheduleId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IScheduleOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='scheduleId'>
        /// Required. The schedule id.
        /// </param>
        /// <returns>
        /// The response model for the get schedule operation.
        /// </returns>
        public static Task<ScheduleGetResponse> GetAsync(this IScheduleOperations operations, string automationAccount, string scheduleId)
        {
            return operations.GetAsync(automationAccount, scheduleId, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieve a list of schedules for the given automation account.
        /// (see http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IScheduleOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='skipToken'>
        /// Optional. The skip token.
        /// </param>
        /// <returns>
        /// The response model for the list schedule operation.
        /// </returns>
        public static ScheduleListResponse List(this IScheduleOperations operations, string automationAccount, string skipToken)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IScheduleOperations)s).ListAsync(automationAccount, skipToken);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieve a list of schedules for the given automation account.
        /// (see http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IScheduleOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='skipToken'>
        /// Optional. The skip token.
        /// </param>
        /// <returns>
        /// The response model for the list schedule operation.
        /// </returns>
        public static Task<ScheduleListResponse> ListAsync(this IScheduleOperations operations, string automationAccount, string skipToken)
        {
            return operations.ListAsync(automationAccount, skipToken, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieve a list of one schedule identified by scheduleName.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IScheduleOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='scheduleName'>
        /// Required. The schedule name.
        /// </param>
        /// <returns>
        /// The response model for the list schedule operation.
        /// </returns>
        public static ScheduleListResponse ListByName(this IScheduleOperations operations, string automationAccount, string scheduleName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IScheduleOperations)s).ListByNameAsync(automationAccount, scheduleName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieve a list of one schedule identified by scheduleName.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IScheduleOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='scheduleName'>
        /// Required. The schedule name.
        /// </param>
        /// <returns>
        /// The response model for the list schedule operation.
        /// </returns>
        public static Task<ScheduleListResponse> ListByNameAsync(this IScheduleOperations operations, string automationAccount, string scheduleName)
        {
            return operations.ListByNameAsync(automationAccount, scheduleName, CancellationToken.None);
        }
        
        /// <summary>
        /// Update the schedule identified by scheduleId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IScheduleOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the update schedule operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Update(this IScheduleOperations operations, string automationAccount, ScheduleUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IScheduleOperations)s).UpdateAsync(automationAccount, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Update the schedule identified by scheduleId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IScheduleOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the update schedule operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> UpdateAsync(this IScheduleOperations operations, string automationAccount, ScheduleUpdateParameters parameters)
        {
            return operations.UpdateAsync(automationAccount, parameters, CancellationToken.None);
        }
    }
}
