// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.Azure.Management.Automation;
using Microsoft.Azure.Management.Automation.Models;

namespace Microsoft.Azure.Management.Automation
{
    public static partial class RunbookVersionOperationsExtensions
    {
        /// <summary>
        /// Create a runbook version with runbookStream as its content.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookVersionOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='runbookStream'>
        /// Required. The content of the runbook version.
        /// </param>
        /// <returns>
        /// The response model for the create runbook version operation.
        /// </returns>
        public static RunbookVersionCreateResponse Create(this IRunbookVersionOperations operations, string automationAccount, Stream runbookStream)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRunbookVersionOperations)s).CreateAsync(automationAccount, runbookStream);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Create a runbook version with runbookStream as its content.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookVersionOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='runbookStream'>
        /// Required. The content of the runbook version.
        /// </param>
        /// <returns>
        /// The response model for the create runbook version operation.
        /// </returns>
        public static Task<RunbookVersionCreateResponse> CreateAsync(this IRunbookVersionOperations operations, string automationAccount, Stream runbookStream)
        {
            return operations.CreateAsync(automationAccount, runbookStream, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieve the runbook version identified by runbookVersionId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookVersionOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='runbookVersionId'>
        /// Required. The runbook version id.
        /// </param>
        /// <returns>
        /// The response model for the get runbook version operation.
        /// </returns>
        public static RunbookVersionGetResponse Get(this IRunbookVersionOperations operations, string automationAccount, string runbookVersionId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRunbookVersionOperations)s).GetAsync(automationAccount, runbookVersionId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieve the runbook version identified by runbookVersionId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookVersionOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='runbookVersionId'>
        /// Required. The runbook version id.
        /// </param>
        /// <returns>
        /// The response model for the get runbook version operation.
        /// </returns>
        public static Task<RunbookVersionGetResponse> GetAsync(this IRunbookVersionOperations operations, string automationAccount, string runbookVersionId)
        {
            return operations.GetAsync(automationAccount, runbookVersionId, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieve the runbook definition identified by runbookVersionId.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookVersionOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='runbookVersionId'>
        /// Required. The runbook version id.
        /// </param>
        /// <returns>
        /// The response model for the get runbook definition operation.
        /// </returns>
        public static RunbookVersionGetRunbookDefinitionResponse GetRunbookDefinition(this IRunbookVersionOperations operations, string automationAccount, string runbookVersionId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRunbookVersionOperations)s).GetRunbookDefinitionAsync(automationAccount, runbookVersionId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieve the runbook definition identified by runbookVersionId.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookVersionOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='runbookVersionId'>
        /// Required. The runbook version id.
        /// </param>
        /// <returns>
        /// The response model for the get runbook definition operation.
        /// </returns>
        public static Task<RunbookVersionGetRunbookDefinitionResponse> GetRunbookDefinitionAsync(this IRunbookVersionOperations operations, string automationAccount, string runbookVersionId)
        {
            return operations.GetRunbookDefinitionAsync(automationAccount, runbookVersionId, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieve a list of runbook versions which are either the draft or
        /// the published runbook version of the runbook identified by
        /// runbookId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookVersionOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='runbookId'>
        /// Required. The runbook id.
        /// </param>
        /// <returns>
        /// The response model for the list runbook version operation.
        /// </returns>
        public static RunbookVersionListResponse ListLatestByRunbookId(this IRunbookVersionOperations operations, string automationAccount, string runbookId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRunbookVersionOperations)s).ListLatestByRunbookIdAsync(automationAccount, runbookId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieve a list of runbook versions which are either the draft or
        /// the published runbook version of the runbook identified by
        /// runbookId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookVersionOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='runbookId'>
        /// Required. The runbook id.
        /// </param>
        /// <returns>
        /// The response model for the list runbook version operation.
        /// </returns>
        public static Task<RunbookVersionListResponse> ListLatestByRunbookIdAsync(this IRunbookVersionOperations operations, string automationAccount, string runbookId)
        {
            return operations.ListLatestByRunbookIdAsync(automationAccount, runbookId, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieve a list of runbook versions filterd by parameters.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookVersionOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the list runbook version by
        /// runbook id and slot operation.
        /// </param>
        /// <returns>
        /// The response model for the list runbook version operation.
        /// </returns>
        public static RunbookVersionListResponse ListLatestByRunbookIdSlot(this IRunbookVersionOperations operations, string automationAccount, RunbookVersionListLatestByRunbookIdSlotParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRunbookVersionOperations)s).ListLatestByRunbookIdSlotAsync(automationAccount, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieve a list of runbook versions filterd by parameters.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookVersionOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the list runbook version by
        /// runbook id and slot operation.
        /// </param>
        /// <returns>
        /// The response model for the list runbook version operation.
        /// </returns>
        public static Task<RunbookVersionListResponse> ListLatestByRunbookIdSlotAsync(this IRunbookVersionOperations operations, string automationAccount, RunbookVersionListLatestByRunbookIdSlotParameters parameters)
        {
            return operations.ListLatestByRunbookIdSlotAsync(automationAccount, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Update the runbook definition identified by runbookVersionId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookVersionOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the update runbook version's
        /// runbook definition operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse UpdateRunbookDefinition(this IRunbookVersionOperations operations, string automationAccount, RunbookVersionUpdateRunbookDefinitionParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRunbookVersionOperations)s).UpdateRunbookDefinitionAsync(automationAccount, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Update the runbook definition identified by runbookVersionId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IRunbookVersionOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the update runbook version's
        /// runbook definition operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> UpdateRunbookDefinitionAsync(this IRunbookVersionOperations operations, string automationAccount, RunbookVersionUpdateRunbookDefinitionParameters parameters)
        {
            return operations.UpdateRunbookDefinitionAsync(automationAccount, parameters, CancellationToken.None);
        }
    }
}
