// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure;
using Microsoft.Azure.Management.Automation;
using Microsoft.Azure.Management.Automation.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Automation
{
    /// <summary>
    /// Service operation for automation runbook versions.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    internal partial class RunbookVersionOperations : IServiceOperations<AutomationManagementClient>, IRunbookVersionOperations
    {
        /// <summary>
        /// Initializes a new instance of the RunbookVersionOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal RunbookVersionOperations(AutomationManagementClient client)
        {
            this._client = client;
        }
        
        private AutomationManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Automation.AutomationManagementClient.
        /// </summary>
        public AutomationManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Create a runbook version with runbookStream as its content.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='runbookStream'>
        /// Required. The content of the runbook version.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the create runbook version operation.
        /// </returns>
        public async Task<RunbookVersionCreateResponse> CreateAsync(string automationAccount, Stream runbookStream, CancellationToken cancellationToken)
        {
            // Validate
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            if (runbookStream == null)
            {
                throw new ArgumentNullException("runbookStream");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("runbookStream", runbookStream);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/OaaSCS/resources/";
            url = url + "automation";
            url = url + "/~/Accounts/";
            url = url + Uri.EscapeDataString(automationAccount);
            url = url + "/RunbookVersions";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-03-13_Preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("MaxDataServiceVersion", "3.0");
                httpRequest.Headers.Add("MinDataServiceVersion", "3.0");
                httpRequest.Headers.Add("x-ms-version", "2013-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                Stream requestContent = runbookStream;
                httpRequest.Content = new StreamContent(requestContent);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/octet-stream");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RunbookVersionCreateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new RunbookVersionCreateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            RunbookVersion runbookVersionInstance = new RunbookVersion();
                            result.RunbookVersion = runbookVersionInstance;
                            
                            JToken accountIDValue = responseDoc["AccountID"];
                            if (accountIDValue != null && accountIDValue.Type != JTokenType.Null)
                            {
                                string accountIDInstance = ((string)accountIDValue);
                                runbookVersionInstance.AccountId = accountIDInstance;
                            }
                            
                            JToken runbookVersionIDValue = responseDoc["RunbookVersionID"];
                            if (runbookVersionIDValue != null && runbookVersionIDValue.Type != JTokenType.Null)
                            {
                                string runbookVersionIDInstance = ((string)runbookVersionIDValue);
                                runbookVersionInstance.Id = runbookVersionIDInstance;
                            }
                            
                            JToken runbookIDValue = responseDoc["RunbookID"];
                            if (runbookIDValue != null && runbookIDValue.Type != JTokenType.Null)
                            {
                                string runbookIDInstance = ((string)runbookIDValue);
                                runbookVersionInstance.RunbookId = runbookIDInstance;
                            }
                            
                            JToken versionNumberValue = responseDoc["VersionNumber"];
                            if (versionNumberValue != null && versionNumberValue.Type != JTokenType.Null)
                            {
                                int versionNumberInstance = ((int)versionNumberValue);
                                runbookVersionInstance.VersionNumber = versionNumberInstance;
                            }
                            
                            JToken isDraftValue = responseDoc["IsDraft"];
                            if (isDraftValue != null && isDraftValue.Type != JTokenType.Null)
                            {
                                bool isDraftInstance = ((bool)isDraftValue);
                                runbookVersionInstance.IsDraft = isDraftInstance;
                            }
                            
                            JToken creationTimeValue = responseDoc["CreationTime"];
                            if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                            {
                                DateTime creationTimeInstance = ((DateTime)creationTimeValue);
                                runbookVersionInstance.CreationTime = creationTimeInstance;
                            }
                            
                            JToken lastModifiedTimeValue = responseDoc["LastModifiedTime"];
                            if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                            {
                                DateTime lastModifiedTimeInstance = ((DateTime)lastModifiedTimeValue);
                                runbookVersionInstance.LastModifiedTime = lastModifiedTimeInstance;
                            }
                            
                            JToken runbookValue = responseDoc["Runbook"];
                            if (runbookValue != null && runbookValue.Type != JTokenType.Null)
                            {
                                Runbook runbookInstance = new Runbook();
                                runbookVersionInstance.Runbook = runbookInstance;
                                
                                JToken accountIDValue2 = runbookValue["AccountID"];
                                if (accountIDValue2 != null && accountIDValue2.Type != JTokenType.Null)
                                {
                                    string accountIDInstance2 = ((string)accountIDValue2);
                                    runbookInstance.AccountId = accountIDInstance2;
                                }
                                
                                JToken runbookIDValue2 = runbookValue["RunbookID"];
                                if (runbookIDValue2 != null && runbookIDValue2.Type != JTokenType.Null)
                                {
                                    string runbookIDInstance2 = ((string)runbookIDValue2);
                                    runbookInstance.Id = runbookIDInstance2;
                                }
                                
                                JToken runbookNameValue = runbookValue["RunbookName"];
                                if (runbookNameValue != null && runbookNameValue.Type != JTokenType.Null)
                                {
                                    string runbookNameInstance = ((string)runbookNameValue);
                                    runbookInstance.Name = runbookNameInstance;
                                }
                                
                                JToken creationTimeValue2 = runbookValue["CreationTime"];
                                if (creationTimeValue2 != null && creationTimeValue2.Type != JTokenType.Null)
                                {
                                    DateTime creationTimeInstance2 = ((DateTime)creationTimeValue2);
                                    runbookInstance.CreationTime = creationTimeInstance2;
                                }
                                
                                JToken lastModifiedTimeValue2 = runbookValue["LastModifiedTime"];
                                if (lastModifiedTimeValue2 != null && lastModifiedTimeValue2.Type != JTokenType.Null)
                                {
                                    DateTime lastModifiedTimeInstance2 = ((DateTime)lastModifiedTimeValue2);
                                    runbookInstance.LastModifiedTime = lastModifiedTimeInstance2;
                                }
                                
                                JToken lastModifiedByValue = runbookValue["LastModifiedBy"];
                                if (lastModifiedByValue != null && lastModifiedByValue.Type != JTokenType.Null)
                                {
                                    string lastModifiedByInstance = ((string)lastModifiedByValue);
                                    runbookInstance.LastModifiedBy = lastModifiedByInstance;
                                }
                                
                                JToken descriptionValue = runbookValue["Description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    runbookInstance.Description = descriptionInstance;
                                }
                                
                                JToken isApiOnlyValue = runbookValue["IsApiOnly"];
                                if (isApiOnlyValue != null && isApiOnlyValue.Type != JTokenType.Null)
                                {
                                    bool isApiOnlyInstance = ((bool)isApiOnlyValue);
                                    runbookInstance.IsApiOnly = isApiOnlyInstance;
                                }
                                
                                JToken isGlobalValue = runbookValue["IsGlobal"];
                                if (isGlobalValue != null && isGlobalValue.Type != JTokenType.Null)
                                {
                                    bool isGlobalInstance = ((bool)isGlobalValue);
                                    runbookInstance.IsGlobal = isGlobalInstance;
                                }
                                
                                JToken publishedRunbookVersionIDValue = runbookValue["PublishedRunbookVersionID"];
                                if (publishedRunbookVersionIDValue != null && publishedRunbookVersionIDValue.Type != JTokenType.Null)
                                {
                                    string publishedRunbookVersionIDInstance = ((string)publishedRunbookVersionIDValue);
                                    runbookInstance.PublishedRunbookVersionId = publishedRunbookVersionIDInstance;
                                }
                                
                                JToken draftRunbookVersionIDValue = runbookValue["DraftRunbookVersionID"];
                                if (draftRunbookVersionIDValue != null && draftRunbookVersionIDValue.Type != JTokenType.Null)
                                {
                                    string draftRunbookVersionIDInstance = ((string)draftRunbookVersionIDValue);
                                    runbookInstance.DraftRunbookVersionId = draftRunbookVersionIDInstance;
                                }
                                
                                JToken tagsValue = runbookValue["Tags"];
                                if (tagsValue != null && tagsValue.Type != JTokenType.Null)
                                {
                                    string tagsInstance = ((string)tagsValue);
                                    runbookInstance.Tags = tagsInstance;
                                }
                                
                                JToken logDebugValue = runbookValue["LogDebug"];
                                if (logDebugValue != null && logDebugValue.Type != JTokenType.Null)
                                {
                                    bool logDebugInstance = ((bool)logDebugValue);
                                    runbookInstance.LogDebug = logDebugInstance;
                                }
                                
                                JToken logVerboseValue = runbookValue["LogVerbose"];
                                if (logVerboseValue != null && logVerboseValue.Type != JTokenType.Null)
                                {
                                    bool logVerboseInstance = ((bool)logVerboseValue);
                                    runbookInstance.LogVerbose = logVerboseInstance;
                                }
                                
                                JToken logProgressValue = runbookValue["LogProgress"];
                                if (logProgressValue != null && logProgressValue.Type != JTokenType.Null)
                                {
                                    bool logProgressInstance = ((bool)logProgressValue);
                                    runbookInstance.LogProgress = logProgressInstance;
                                }
                                
                                JToken schedulesArray = runbookValue["Schedules"];
                                if (schedulesArray != null && schedulesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken schedulesValue in ((JArray)schedulesArray))
                                    {
                                        Schedule scheduleInstance = new Schedule();
                                        runbookInstance.Schedules.Add(scheduleInstance);
                                        
                                        JToken scheduleIDValue = schedulesValue["ScheduleID"];
                                        if (scheduleIDValue != null && scheduleIDValue.Type != JTokenType.Null)
                                        {
                                            string scheduleIDInstance = ((string)scheduleIDValue);
                                            scheduleInstance.Id = scheduleIDInstance;
                                        }
                                        
                                        JToken accountIDValue3 = schedulesValue["AccountID"];
                                        if (accountIDValue3 != null && accountIDValue3.Type != JTokenType.Null)
                                        {
                                            string accountIDInstance3 = ((string)accountIDValue3);
                                            scheduleInstance.AccountId = accountIDInstance3;
                                        }
                                        
                                        JToken nameValue = schedulesValue["Name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            scheduleInstance.Name = nameInstance;
                                        }
                                        
                                        JToken descriptionValue2 = schedulesValue["Description"];
                                        if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance2 = ((string)descriptionValue2);
                                            scheduleInstance.Description = descriptionInstance2;
                                        }
                                        
                                        JToken startTimeValue = schedulesValue["StartTime"];
                                        if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime startTimeInstance = ((DateTime)startTimeValue);
                                            scheduleInstance.StartTime = startTimeInstance;
                                        }
                                        
                                        JToken expiryTimeValue = schedulesValue["ExpiryTime"];
                                        if (expiryTimeValue != null && expiryTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime expiryTimeInstance = ((DateTime)expiryTimeValue);
                                            scheduleInstance.ExpiryTime = expiryTimeInstance;
                                        }
                                        
                                        JToken creationTimeValue3 = schedulesValue["CreationTime"];
                                        if (creationTimeValue3 != null && creationTimeValue3.Type != JTokenType.Null)
                                        {
                                            DateTime creationTimeInstance3 = ((DateTime)creationTimeValue3);
                                            scheduleInstance.CreationTime = creationTimeInstance3;
                                        }
                                        
                                        JToken lastModifiedTimeValue3 = schedulesValue["LastModifiedTime"];
                                        if (lastModifiedTimeValue3 != null && lastModifiedTimeValue3.Type != JTokenType.Null)
                                        {
                                            DateTime lastModifiedTimeInstance3 = ((DateTime)lastModifiedTimeValue3);
                                            scheduleInstance.LastModifiedTime = lastModifiedTimeInstance3;
                                        }
                                        
                                        JToken isEnabledValue = schedulesValue["IsEnabled"];
                                        if (isEnabledValue != null && isEnabledValue.Type != JTokenType.Null)
                                        {
                                            bool isEnabledInstance = ((bool)isEnabledValue);
                                            scheduleInstance.IsEnabled = isEnabledInstance;
                                        }
                                        
                                        JToken nextRunValue = schedulesValue["NextRun"];
                                        if (nextRunValue != null && nextRunValue.Type != JTokenType.Null)
                                        {
                                            DateTime nextRunInstance = ((DateTime)nextRunValue);
                                            scheduleInstance.NextRun = nextRunInstance;
                                        }
                                        
                                        JToken dayIntervalValue = schedulesValue["DayInterval"];
                                        if (dayIntervalValue != null && dayIntervalValue.Type != JTokenType.Null)
                                        {
                                            int dayIntervalInstance = ((int)dayIntervalValue);
                                            scheduleInstance.DayInterval = dayIntervalInstance;
                                        }
                                        
                                        JToken hourIntervalValue = schedulesValue["HourInterval"];
                                        if (hourIntervalValue != null && hourIntervalValue.Type != JTokenType.Null)
                                        {
                                            int hourIntervalInstance = ((int)hourIntervalValue);
                                            scheduleInstance.HourInterval = hourIntervalInstance;
                                        }
                                        
                                        JToken odatatypeValue = schedulesValue["odata.type"];
                                        if (odatatypeValue != null && odatatypeValue.Type != JTokenType.Null)
                                        {
                                            string odatatypeInstance = ((string)odatatypeValue);
                                            scheduleInstance.ScheduleType = odatatypeInstance;
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieve the runbook version identified by runbookVersionId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='runbookVersionId'>
        /// Required. The runbook version id.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the get runbook version operation.
        /// </returns>
        public async Task<RunbookVersionGetResponse> GetAsync(string automationAccount, string runbookVersionId, CancellationToken cancellationToken)
        {
            // Validate
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            if (runbookVersionId == null)
            {
                throw new ArgumentNullException("runbookVersionId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("runbookVersionId", runbookVersionId);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/OaaSCS/resources/";
            url = url + "automation";
            url = url + "/~/Accounts/";
            url = url + Uri.EscapeDataString(automationAccount);
            url = url + "/RunbookVersions(guid'";
            url = url + Uri.EscapeDataString(runbookVersionId);
            url = url + "')";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-03-13_Preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("MaxDataServiceVersion", "3.0");
                httpRequest.Headers.Add("MinDataServiceVersion", "3.0");
                httpRequest.Headers.Add("x-ms-version", "2013-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RunbookVersionGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new RunbookVersionGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            RunbookVersion runbookVersionInstance = new RunbookVersion();
                            result.RunbookVersion = runbookVersionInstance;
                            
                            JToken accountIDValue = responseDoc["AccountID"];
                            if (accountIDValue != null && accountIDValue.Type != JTokenType.Null)
                            {
                                string accountIDInstance = ((string)accountIDValue);
                                runbookVersionInstance.AccountId = accountIDInstance;
                            }
                            
                            JToken runbookVersionIDValue = responseDoc["RunbookVersionID"];
                            if (runbookVersionIDValue != null && runbookVersionIDValue.Type != JTokenType.Null)
                            {
                                string runbookVersionIDInstance = ((string)runbookVersionIDValue);
                                runbookVersionInstance.Id = runbookVersionIDInstance;
                            }
                            
                            JToken runbookIDValue = responseDoc["RunbookID"];
                            if (runbookIDValue != null && runbookIDValue.Type != JTokenType.Null)
                            {
                                string runbookIDInstance = ((string)runbookIDValue);
                                runbookVersionInstance.RunbookId = runbookIDInstance;
                            }
                            
                            JToken versionNumberValue = responseDoc["VersionNumber"];
                            if (versionNumberValue != null && versionNumberValue.Type != JTokenType.Null)
                            {
                                int versionNumberInstance = ((int)versionNumberValue);
                                runbookVersionInstance.VersionNumber = versionNumberInstance;
                            }
                            
                            JToken isDraftValue = responseDoc["IsDraft"];
                            if (isDraftValue != null && isDraftValue.Type != JTokenType.Null)
                            {
                                bool isDraftInstance = ((bool)isDraftValue);
                                runbookVersionInstance.IsDraft = isDraftInstance;
                            }
                            
                            JToken creationTimeValue = responseDoc["CreationTime"];
                            if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                            {
                                DateTime creationTimeInstance = ((DateTime)creationTimeValue);
                                runbookVersionInstance.CreationTime = creationTimeInstance;
                            }
                            
                            JToken lastModifiedTimeValue = responseDoc["LastModifiedTime"];
                            if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                            {
                                DateTime lastModifiedTimeInstance = ((DateTime)lastModifiedTimeValue);
                                runbookVersionInstance.LastModifiedTime = lastModifiedTimeInstance;
                            }
                            
                            JToken runbookValue = responseDoc["Runbook"];
                            if (runbookValue != null && runbookValue.Type != JTokenType.Null)
                            {
                                Runbook runbookInstance = new Runbook();
                                runbookVersionInstance.Runbook = runbookInstance;
                                
                                JToken accountIDValue2 = runbookValue["AccountID"];
                                if (accountIDValue2 != null && accountIDValue2.Type != JTokenType.Null)
                                {
                                    string accountIDInstance2 = ((string)accountIDValue2);
                                    runbookInstance.AccountId = accountIDInstance2;
                                }
                                
                                JToken runbookIDValue2 = runbookValue["RunbookID"];
                                if (runbookIDValue2 != null && runbookIDValue2.Type != JTokenType.Null)
                                {
                                    string runbookIDInstance2 = ((string)runbookIDValue2);
                                    runbookInstance.Id = runbookIDInstance2;
                                }
                                
                                JToken runbookNameValue = runbookValue["RunbookName"];
                                if (runbookNameValue != null && runbookNameValue.Type != JTokenType.Null)
                                {
                                    string runbookNameInstance = ((string)runbookNameValue);
                                    runbookInstance.Name = runbookNameInstance;
                                }
                                
                                JToken creationTimeValue2 = runbookValue["CreationTime"];
                                if (creationTimeValue2 != null && creationTimeValue2.Type != JTokenType.Null)
                                {
                                    DateTime creationTimeInstance2 = ((DateTime)creationTimeValue2);
                                    runbookInstance.CreationTime = creationTimeInstance2;
                                }
                                
                                JToken lastModifiedTimeValue2 = runbookValue["LastModifiedTime"];
                                if (lastModifiedTimeValue2 != null && lastModifiedTimeValue2.Type != JTokenType.Null)
                                {
                                    DateTime lastModifiedTimeInstance2 = ((DateTime)lastModifiedTimeValue2);
                                    runbookInstance.LastModifiedTime = lastModifiedTimeInstance2;
                                }
                                
                                JToken lastModifiedByValue = runbookValue["LastModifiedBy"];
                                if (lastModifiedByValue != null && lastModifiedByValue.Type != JTokenType.Null)
                                {
                                    string lastModifiedByInstance = ((string)lastModifiedByValue);
                                    runbookInstance.LastModifiedBy = lastModifiedByInstance;
                                }
                                
                                JToken descriptionValue = runbookValue["Description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    runbookInstance.Description = descriptionInstance;
                                }
                                
                                JToken isApiOnlyValue = runbookValue["IsApiOnly"];
                                if (isApiOnlyValue != null && isApiOnlyValue.Type != JTokenType.Null)
                                {
                                    bool isApiOnlyInstance = ((bool)isApiOnlyValue);
                                    runbookInstance.IsApiOnly = isApiOnlyInstance;
                                }
                                
                                JToken isGlobalValue = runbookValue["IsGlobal"];
                                if (isGlobalValue != null && isGlobalValue.Type != JTokenType.Null)
                                {
                                    bool isGlobalInstance = ((bool)isGlobalValue);
                                    runbookInstance.IsGlobal = isGlobalInstance;
                                }
                                
                                JToken publishedRunbookVersionIDValue = runbookValue["PublishedRunbookVersionID"];
                                if (publishedRunbookVersionIDValue != null && publishedRunbookVersionIDValue.Type != JTokenType.Null)
                                {
                                    string publishedRunbookVersionIDInstance = ((string)publishedRunbookVersionIDValue);
                                    runbookInstance.PublishedRunbookVersionId = publishedRunbookVersionIDInstance;
                                }
                                
                                JToken draftRunbookVersionIDValue = runbookValue["DraftRunbookVersionID"];
                                if (draftRunbookVersionIDValue != null && draftRunbookVersionIDValue.Type != JTokenType.Null)
                                {
                                    string draftRunbookVersionIDInstance = ((string)draftRunbookVersionIDValue);
                                    runbookInstance.DraftRunbookVersionId = draftRunbookVersionIDInstance;
                                }
                                
                                JToken tagsValue = runbookValue["Tags"];
                                if (tagsValue != null && tagsValue.Type != JTokenType.Null)
                                {
                                    string tagsInstance = ((string)tagsValue);
                                    runbookInstance.Tags = tagsInstance;
                                }
                                
                                JToken logDebugValue = runbookValue["LogDebug"];
                                if (logDebugValue != null && logDebugValue.Type != JTokenType.Null)
                                {
                                    bool logDebugInstance = ((bool)logDebugValue);
                                    runbookInstance.LogDebug = logDebugInstance;
                                }
                                
                                JToken logVerboseValue = runbookValue["LogVerbose"];
                                if (logVerboseValue != null && logVerboseValue.Type != JTokenType.Null)
                                {
                                    bool logVerboseInstance = ((bool)logVerboseValue);
                                    runbookInstance.LogVerbose = logVerboseInstance;
                                }
                                
                                JToken logProgressValue = runbookValue["LogProgress"];
                                if (logProgressValue != null && logProgressValue.Type != JTokenType.Null)
                                {
                                    bool logProgressInstance = ((bool)logProgressValue);
                                    runbookInstance.LogProgress = logProgressInstance;
                                }
                                
                                JToken schedulesArray = runbookValue["Schedules"];
                                if (schedulesArray != null && schedulesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken schedulesValue in ((JArray)schedulesArray))
                                    {
                                        Schedule scheduleInstance = new Schedule();
                                        runbookInstance.Schedules.Add(scheduleInstance);
                                        
                                        JToken scheduleIDValue = schedulesValue["ScheduleID"];
                                        if (scheduleIDValue != null && scheduleIDValue.Type != JTokenType.Null)
                                        {
                                            string scheduleIDInstance = ((string)scheduleIDValue);
                                            scheduleInstance.Id = scheduleIDInstance;
                                        }
                                        
                                        JToken accountIDValue3 = schedulesValue["AccountID"];
                                        if (accountIDValue3 != null && accountIDValue3.Type != JTokenType.Null)
                                        {
                                            string accountIDInstance3 = ((string)accountIDValue3);
                                            scheduleInstance.AccountId = accountIDInstance3;
                                        }
                                        
                                        JToken nameValue = schedulesValue["Name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            scheduleInstance.Name = nameInstance;
                                        }
                                        
                                        JToken descriptionValue2 = schedulesValue["Description"];
                                        if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance2 = ((string)descriptionValue2);
                                            scheduleInstance.Description = descriptionInstance2;
                                        }
                                        
                                        JToken startTimeValue = schedulesValue["StartTime"];
                                        if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime startTimeInstance = ((DateTime)startTimeValue);
                                            scheduleInstance.StartTime = startTimeInstance;
                                        }
                                        
                                        JToken expiryTimeValue = schedulesValue["ExpiryTime"];
                                        if (expiryTimeValue != null && expiryTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime expiryTimeInstance = ((DateTime)expiryTimeValue);
                                            scheduleInstance.ExpiryTime = expiryTimeInstance;
                                        }
                                        
                                        JToken creationTimeValue3 = schedulesValue["CreationTime"];
                                        if (creationTimeValue3 != null && creationTimeValue3.Type != JTokenType.Null)
                                        {
                                            DateTime creationTimeInstance3 = ((DateTime)creationTimeValue3);
                                            scheduleInstance.CreationTime = creationTimeInstance3;
                                        }
                                        
                                        JToken lastModifiedTimeValue3 = schedulesValue["LastModifiedTime"];
                                        if (lastModifiedTimeValue3 != null && lastModifiedTimeValue3.Type != JTokenType.Null)
                                        {
                                            DateTime lastModifiedTimeInstance3 = ((DateTime)lastModifiedTimeValue3);
                                            scheduleInstance.LastModifiedTime = lastModifiedTimeInstance3;
                                        }
                                        
                                        JToken isEnabledValue = schedulesValue["IsEnabled"];
                                        if (isEnabledValue != null && isEnabledValue.Type != JTokenType.Null)
                                        {
                                            bool isEnabledInstance = ((bool)isEnabledValue);
                                            scheduleInstance.IsEnabled = isEnabledInstance;
                                        }
                                        
                                        JToken nextRunValue = schedulesValue["NextRun"];
                                        if (nextRunValue != null && nextRunValue.Type != JTokenType.Null)
                                        {
                                            DateTime nextRunInstance = ((DateTime)nextRunValue);
                                            scheduleInstance.NextRun = nextRunInstance;
                                        }
                                        
                                        JToken dayIntervalValue = schedulesValue["DayInterval"];
                                        if (dayIntervalValue != null && dayIntervalValue.Type != JTokenType.Null)
                                        {
                                            int dayIntervalInstance = ((int)dayIntervalValue);
                                            scheduleInstance.DayInterval = dayIntervalInstance;
                                        }
                                        
                                        JToken hourIntervalValue = schedulesValue["HourInterval"];
                                        if (hourIntervalValue != null && hourIntervalValue.Type != JTokenType.Null)
                                        {
                                            int hourIntervalInstance = ((int)hourIntervalValue);
                                            scheduleInstance.HourInterval = hourIntervalInstance;
                                        }
                                        
                                        JToken odatatypeValue = schedulesValue["odata.type"];
                                        if (odatatypeValue != null && odatatypeValue.Type != JTokenType.Null)
                                        {
                                            string odatatypeInstance = ((string)odatatypeValue);
                                            scheduleInstance.ScheduleType = odatatypeInstance;
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieve the runbook definition identified by runbookVersionId.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='runbookVersionId'>
        /// Required. The runbook version id.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the get runbook definition operation.
        /// </returns>
        public async Task<RunbookVersionGetRunbookDefinitionResponse> GetRunbookDefinitionAsync(string automationAccount, string runbookVersionId, CancellationToken cancellationToken)
        {
            // Validate
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            if (runbookVersionId == null)
            {
                throw new ArgumentNullException("runbookVersionId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("runbookVersionId", runbookVersionId);
                TracingAdapter.Enter(invocationId, this, "GetRunbookDefinitionAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/OaaSCS/resources/";
            url = url + "automation";
            url = url + "/~/Accounts/";
            url = url + Uri.EscapeDataString(automationAccount);
            url = url + "/RunbookVersions(guid'";
            url = url + Uri.EscapeDataString(runbookVersionId);
            url = url + "')/$value";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-03-13_Preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/octet-stream");
                httpRequest.Headers.Add("MaxDataServiceVersion", "3.0");
                httpRequest.Headers.Add("MinDataServiceVersion", "3.0");
                httpRequest.Headers.Add("x-ms-version", "2013-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RunbookVersionGetRunbookDefinitionResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new RunbookVersionGetRunbookDefinitionResponse();
                        result.RunbookDefinition = Encoding.UTF8.GetBytes(responseContent);
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("ETag"))
                    {
                        result.ETag = httpResponse.Headers.GetValues("ETag").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieve a list of runbook versions which are either the draft or
        /// the published runbook version of the runbook identified by
        /// runbookId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='runbookId'>
        /// Required. The runbook id.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list runbook version operation.
        /// </returns>
        public async Task<RunbookVersionListResponse> ListLatestByRunbookIdAsync(string automationAccount, string runbookId, CancellationToken cancellationToken)
        {
            // Validate
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            if (runbookId == null)
            {
                throw new ArgumentNullException("runbookId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("runbookId", runbookId);
                TracingAdapter.Enter(invocationId, this, "ListLatestByRunbookIdAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/OaaSCS/resources/";
            url = url + "automation";
            url = url + "/~/Accounts/";
            url = url + Uri.EscapeDataString(automationAccount);
            url = url + "/RunbookVersions";
            List<string> queryParameters = new List<string>();
            List<string> odataFilter = new List<string>();
            List<string> odataFilter2 = new List<string>();
            odataFilter2.Add("RunbookVersionID eq Runbook/PublishedRunbookVersionID");
            odataFilter2.Add("RunbookVersionID eq Runbook/DraftRunbookVersionID");
            if (odataFilter2.Count > 0)
            {
                odataFilter.Add("(" + string.Join(" or ", odataFilter2) + ")");
            }
            odataFilter.Add("RunbookID eq guid'" + Uri.EscapeDataString(runbookId) + "'");
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(" and ", odataFilter));
            }
            queryParameters.Add("api-version=2014-03-13_Preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("MaxDataServiceVersion", "3.0");
                httpRequest.Headers.Add("MinDataServiceVersion", "3.0");
                httpRequest.Headers.Add("x-ms-version", "2013-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RunbookVersionListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new RunbookVersionListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    RunbookVersion runbookVersionInstance = new RunbookVersion();
                                    result.RunbookVersions.Add(runbookVersionInstance);
                                    
                                    JToken accountIDValue = valueValue["AccountID"];
                                    if (accountIDValue != null && accountIDValue.Type != JTokenType.Null)
                                    {
                                        string accountIDInstance = ((string)accountIDValue);
                                        runbookVersionInstance.AccountId = accountIDInstance;
                                    }
                                    
                                    JToken runbookVersionIDValue = valueValue["RunbookVersionID"];
                                    if (runbookVersionIDValue != null && runbookVersionIDValue.Type != JTokenType.Null)
                                    {
                                        string runbookVersionIDInstance = ((string)runbookVersionIDValue);
                                        runbookVersionInstance.Id = runbookVersionIDInstance;
                                    }
                                    
                                    JToken runbookIDValue = valueValue["RunbookID"];
                                    if (runbookIDValue != null && runbookIDValue.Type != JTokenType.Null)
                                    {
                                        string runbookIDInstance = ((string)runbookIDValue);
                                        runbookVersionInstance.RunbookId = runbookIDInstance;
                                    }
                                    
                                    JToken versionNumberValue = valueValue["VersionNumber"];
                                    if (versionNumberValue != null && versionNumberValue.Type != JTokenType.Null)
                                    {
                                        int versionNumberInstance = ((int)versionNumberValue);
                                        runbookVersionInstance.VersionNumber = versionNumberInstance;
                                    }
                                    
                                    JToken isDraftValue = valueValue["IsDraft"];
                                    if (isDraftValue != null && isDraftValue.Type != JTokenType.Null)
                                    {
                                        bool isDraftInstance = ((bool)isDraftValue);
                                        runbookVersionInstance.IsDraft = isDraftInstance;
                                    }
                                    
                                    JToken creationTimeValue = valueValue["CreationTime"];
                                    if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime creationTimeInstance = ((DateTime)creationTimeValue);
                                        runbookVersionInstance.CreationTime = creationTimeInstance;
                                    }
                                    
                                    JToken lastModifiedTimeValue = valueValue["LastModifiedTime"];
                                    if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime lastModifiedTimeInstance = ((DateTime)lastModifiedTimeValue);
                                        runbookVersionInstance.LastModifiedTime = lastModifiedTimeInstance;
                                    }
                                    
                                    JToken runbookValue = valueValue["Runbook"];
                                    if (runbookValue != null && runbookValue.Type != JTokenType.Null)
                                    {
                                        Runbook runbookInstance = new Runbook();
                                        runbookVersionInstance.Runbook = runbookInstance;
                                        
                                        JToken accountIDValue2 = runbookValue["AccountID"];
                                        if (accountIDValue2 != null && accountIDValue2.Type != JTokenType.Null)
                                        {
                                            string accountIDInstance2 = ((string)accountIDValue2);
                                            runbookInstance.AccountId = accountIDInstance2;
                                        }
                                        
                                        JToken runbookIDValue2 = runbookValue["RunbookID"];
                                        if (runbookIDValue2 != null && runbookIDValue2.Type != JTokenType.Null)
                                        {
                                            string runbookIDInstance2 = ((string)runbookIDValue2);
                                            runbookInstance.Id = runbookIDInstance2;
                                        }
                                        
                                        JToken runbookNameValue = runbookValue["RunbookName"];
                                        if (runbookNameValue != null && runbookNameValue.Type != JTokenType.Null)
                                        {
                                            string runbookNameInstance = ((string)runbookNameValue);
                                            runbookInstance.Name = runbookNameInstance;
                                        }
                                        
                                        JToken creationTimeValue2 = runbookValue["CreationTime"];
                                        if (creationTimeValue2 != null && creationTimeValue2.Type != JTokenType.Null)
                                        {
                                            DateTime creationTimeInstance2 = ((DateTime)creationTimeValue2);
                                            runbookInstance.CreationTime = creationTimeInstance2;
                                        }
                                        
                                        JToken lastModifiedTimeValue2 = runbookValue["LastModifiedTime"];
                                        if (lastModifiedTimeValue2 != null && lastModifiedTimeValue2.Type != JTokenType.Null)
                                        {
                                            DateTime lastModifiedTimeInstance2 = ((DateTime)lastModifiedTimeValue2);
                                            runbookInstance.LastModifiedTime = lastModifiedTimeInstance2;
                                        }
                                        
                                        JToken lastModifiedByValue = runbookValue["LastModifiedBy"];
                                        if (lastModifiedByValue != null && lastModifiedByValue.Type != JTokenType.Null)
                                        {
                                            string lastModifiedByInstance = ((string)lastModifiedByValue);
                                            runbookInstance.LastModifiedBy = lastModifiedByInstance;
                                        }
                                        
                                        JToken descriptionValue = runbookValue["Description"];
                                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance = ((string)descriptionValue);
                                            runbookInstance.Description = descriptionInstance;
                                        }
                                        
                                        JToken isApiOnlyValue = runbookValue["IsApiOnly"];
                                        if (isApiOnlyValue != null && isApiOnlyValue.Type != JTokenType.Null)
                                        {
                                            bool isApiOnlyInstance = ((bool)isApiOnlyValue);
                                            runbookInstance.IsApiOnly = isApiOnlyInstance;
                                        }
                                        
                                        JToken isGlobalValue = runbookValue["IsGlobal"];
                                        if (isGlobalValue != null && isGlobalValue.Type != JTokenType.Null)
                                        {
                                            bool isGlobalInstance = ((bool)isGlobalValue);
                                            runbookInstance.IsGlobal = isGlobalInstance;
                                        }
                                        
                                        JToken publishedRunbookVersionIDValue = runbookValue["PublishedRunbookVersionID"];
                                        if (publishedRunbookVersionIDValue != null && publishedRunbookVersionIDValue.Type != JTokenType.Null)
                                        {
                                            string publishedRunbookVersionIDInstance = ((string)publishedRunbookVersionIDValue);
                                            runbookInstance.PublishedRunbookVersionId = publishedRunbookVersionIDInstance;
                                        }
                                        
                                        JToken draftRunbookVersionIDValue = runbookValue["DraftRunbookVersionID"];
                                        if (draftRunbookVersionIDValue != null && draftRunbookVersionIDValue.Type != JTokenType.Null)
                                        {
                                            string draftRunbookVersionIDInstance = ((string)draftRunbookVersionIDValue);
                                            runbookInstance.DraftRunbookVersionId = draftRunbookVersionIDInstance;
                                        }
                                        
                                        JToken tagsValue = runbookValue["Tags"];
                                        if (tagsValue != null && tagsValue.Type != JTokenType.Null)
                                        {
                                            string tagsInstance = ((string)tagsValue);
                                            runbookInstance.Tags = tagsInstance;
                                        }
                                        
                                        JToken logDebugValue = runbookValue["LogDebug"];
                                        if (logDebugValue != null && logDebugValue.Type != JTokenType.Null)
                                        {
                                            bool logDebugInstance = ((bool)logDebugValue);
                                            runbookInstance.LogDebug = logDebugInstance;
                                        }
                                        
                                        JToken logVerboseValue = runbookValue["LogVerbose"];
                                        if (logVerboseValue != null && logVerboseValue.Type != JTokenType.Null)
                                        {
                                            bool logVerboseInstance = ((bool)logVerboseValue);
                                            runbookInstance.LogVerbose = logVerboseInstance;
                                        }
                                        
                                        JToken logProgressValue = runbookValue["LogProgress"];
                                        if (logProgressValue != null && logProgressValue.Type != JTokenType.Null)
                                        {
                                            bool logProgressInstance = ((bool)logProgressValue);
                                            runbookInstance.LogProgress = logProgressInstance;
                                        }
                                        
                                        JToken schedulesArray = runbookValue["Schedules"];
                                        if (schedulesArray != null && schedulesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken schedulesValue in ((JArray)schedulesArray))
                                            {
                                                Schedule scheduleInstance = new Schedule();
                                                runbookInstance.Schedules.Add(scheduleInstance);
                                                
                                                JToken scheduleIDValue = schedulesValue["ScheduleID"];
                                                if (scheduleIDValue != null && scheduleIDValue.Type != JTokenType.Null)
                                                {
                                                    string scheduleIDInstance = ((string)scheduleIDValue);
                                                    scheduleInstance.Id = scheduleIDInstance;
                                                }
                                                
                                                JToken accountIDValue3 = schedulesValue["AccountID"];
                                                if (accountIDValue3 != null && accountIDValue3.Type != JTokenType.Null)
                                                {
                                                    string accountIDInstance3 = ((string)accountIDValue3);
                                                    scheduleInstance.AccountId = accountIDInstance3;
                                                }
                                                
                                                JToken nameValue = schedulesValue["Name"];
                                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                {
                                                    string nameInstance = ((string)nameValue);
                                                    scheduleInstance.Name = nameInstance;
                                                }
                                                
                                                JToken descriptionValue2 = schedulesValue["Description"];
                                                if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                                {
                                                    string descriptionInstance2 = ((string)descriptionValue2);
                                                    scheduleInstance.Description = descriptionInstance2;
                                                }
                                                
                                                JToken startTimeValue = schedulesValue["StartTime"];
                                                if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                                {
                                                    DateTime startTimeInstance = ((DateTime)startTimeValue);
                                                    scheduleInstance.StartTime = startTimeInstance;
                                                }
                                                
                                                JToken expiryTimeValue = schedulesValue["ExpiryTime"];
                                                if (expiryTimeValue != null && expiryTimeValue.Type != JTokenType.Null)
                                                {
                                                    DateTime expiryTimeInstance = ((DateTime)expiryTimeValue);
                                                    scheduleInstance.ExpiryTime = expiryTimeInstance;
                                                }
                                                
                                                JToken creationTimeValue3 = schedulesValue["CreationTime"];
                                                if (creationTimeValue3 != null && creationTimeValue3.Type != JTokenType.Null)
                                                {
                                                    DateTime creationTimeInstance3 = ((DateTime)creationTimeValue3);
                                                    scheduleInstance.CreationTime = creationTimeInstance3;
                                                }
                                                
                                                JToken lastModifiedTimeValue3 = schedulesValue["LastModifiedTime"];
                                                if (lastModifiedTimeValue3 != null && lastModifiedTimeValue3.Type != JTokenType.Null)
                                                {
                                                    DateTime lastModifiedTimeInstance3 = ((DateTime)lastModifiedTimeValue3);
                                                    scheduleInstance.LastModifiedTime = lastModifiedTimeInstance3;
                                                }
                                                
                                                JToken isEnabledValue = schedulesValue["IsEnabled"];
                                                if (isEnabledValue != null && isEnabledValue.Type != JTokenType.Null)
                                                {
                                                    bool isEnabledInstance = ((bool)isEnabledValue);
                                                    scheduleInstance.IsEnabled = isEnabledInstance;
                                                }
                                                
                                                JToken nextRunValue = schedulesValue["NextRun"];
                                                if (nextRunValue != null && nextRunValue.Type != JTokenType.Null)
                                                {
                                                    DateTime nextRunInstance = ((DateTime)nextRunValue);
                                                    scheduleInstance.NextRun = nextRunInstance;
                                                }
                                                
                                                JToken dayIntervalValue = schedulesValue["DayInterval"];
                                                if (dayIntervalValue != null && dayIntervalValue.Type != JTokenType.Null)
                                                {
                                                    int dayIntervalInstance = ((int)dayIntervalValue);
                                                    scheduleInstance.DayInterval = dayIntervalInstance;
                                                }
                                                
                                                JToken hourIntervalValue = schedulesValue["HourInterval"];
                                                if (hourIntervalValue != null && hourIntervalValue.Type != JTokenType.Null)
                                                {
                                                    int hourIntervalInstance = ((int)hourIntervalValue);
                                                    scheduleInstance.HourInterval = hourIntervalInstance;
                                                }
                                                
                                                JToken odatatypeValue = schedulesValue["odata.type"];
                                                if (odatatypeValue != null && odatatypeValue.Type != JTokenType.Null)
                                                {
                                                    string odatatypeInstance = ((string)odatatypeValue);
                                                    scheduleInstance.ScheduleType = odatatypeInstance;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieve a list of runbook versions filterd by parameters.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the list runbook version by
        /// runbook id and slot operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list runbook version operation.
        /// </returns>
        public async Task<RunbookVersionListResponse> ListLatestByRunbookIdSlotAsync(string automationAccount, RunbookVersionListLatestByRunbookIdSlotParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.RunbookId == null)
            {
                throw new ArgumentNullException("parameters.RunbookId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ListLatestByRunbookIdSlotAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/OaaSCS/resources/";
            url = url + "automation";
            url = url + "/~/Accounts/";
            url = url + Uri.EscapeDataString(automationAccount);
            url = url + "/RunbookVersions";
            List<string> queryParameters = new List<string>();
            List<string> odataFilter = new List<string>();
            List<string> odataFilter2 = new List<string>();
            odataFilter2.Add("RunbookVersionID eq Runbook/PublishedRunbookVersionID");
            odataFilter2.Add("RunbookVersionID eq Runbook/DraftRunbookVersionID");
            if (odataFilter2.Count > 0)
            {
                odataFilter.Add("(" + string.Join(" or ", odataFilter2) + ")");
            }
            odataFilter.Add("RunbookID eq guid'" + Uri.EscapeDataString(parameters.RunbookId) + "'");
            odataFilter.Add("IsDraft eq " + Uri.EscapeDataString(parameters.IsDraft.ToString().ToLower()));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(" and ", odataFilter));
            }
            queryParameters.Add("api-version=2014-03-13_Preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("MaxDataServiceVersion", "3.0");
                httpRequest.Headers.Add("MinDataServiceVersion", "3.0");
                httpRequest.Headers.Add("x-ms-version", "2013-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RunbookVersionListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new RunbookVersionListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    RunbookVersion runbookVersionInstance = new RunbookVersion();
                                    result.RunbookVersions.Add(runbookVersionInstance);
                                    
                                    JToken accountIDValue = valueValue["AccountID"];
                                    if (accountIDValue != null && accountIDValue.Type != JTokenType.Null)
                                    {
                                        string accountIDInstance = ((string)accountIDValue);
                                        runbookVersionInstance.AccountId = accountIDInstance;
                                    }
                                    
                                    JToken runbookVersionIDValue = valueValue["RunbookVersionID"];
                                    if (runbookVersionIDValue != null && runbookVersionIDValue.Type != JTokenType.Null)
                                    {
                                        string runbookVersionIDInstance = ((string)runbookVersionIDValue);
                                        runbookVersionInstance.Id = runbookVersionIDInstance;
                                    }
                                    
                                    JToken runbookIDValue = valueValue["RunbookID"];
                                    if (runbookIDValue != null && runbookIDValue.Type != JTokenType.Null)
                                    {
                                        string runbookIDInstance = ((string)runbookIDValue);
                                        runbookVersionInstance.RunbookId = runbookIDInstance;
                                    }
                                    
                                    JToken versionNumberValue = valueValue["VersionNumber"];
                                    if (versionNumberValue != null && versionNumberValue.Type != JTokenType.Null)
                                    {
                                        int versionNumberInstance = ((int)versionNumberValue);
                                        runbookVersionInstance.VersionNumber = versionNumberInstance;
                                    }
                                    
                                    JToken isDraftValue = valueValue["IsDraft"];
                                    if (isDraftValue != null && isDraftValue.Type != JTokenType.Null)
                                    {
                                        bool isDraftInstance = ((bool)isDraftValue);
                                        runbookVersionInstance.IsDraft = isDraftInstance;
                                    }
                                    
                                    JToken creationTimeValue = valueValue["CreationTime"];
                                    if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime creationTimeInstance = ((DateTime)creationTimeValue);
                                        runbookVersionInstance.CreationTime = creationTimeInstance;
                                    }
                                    
                                    JToken lastModifiedTimeValue = valueValue["LastModifiedTime"];
                                    if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime lastModifiedTimeInstance = ((DateTime)lastModifiedTimeValue);
                                        runbookVersionInstance.LastModifiedTime = lastModifiedTimeInstance;
                                    }
                                    
                                    JToken runbookValue = valueValue["Runbook"];
                                    if (runbookValue != null && runbookValue.Type != JTokenType.Null)
                                    {
                                        Runbook runbookInstance = new Runbook();
                                        runbookVersionInstance.Runbook = runbookInstance;
                                        
                                        JToken accountIDValue2 = runbookValue["AccountID"];
                                        if (accountIDValue2 != null && accountIDValue2.Type != JTokenType.Null)
                                        {
                                            string accountIDInstance2 = ((string)accountIDValue2);
                                            runbookInstance.AccountId = accountIDInstance2;
                                        }
                                        
                                        JToken runbookIDValue2 = runbookValue["RunbookID"];
                                        if (runbookIDValue2 != null && runbookIDValue2.Type != JTokenType.Null)
                                        {
                                            string runbookIDInstance2 = ((string)runbookIDValue2);
                                            runbookInstance.Id = runbookIDInstance2;
                                        }
                                        
                                        JToken runbookNameValue = runbookValue["RunbookName"];
                                        if (runbookNameValue != null && runbookNameValue.Type != JTokenType.Null)
                                        {
                                            string runbookNameInstance = ((string)runbookNameValue);
                                            runbookInstance.Name = runbookNameInstance;
                                        }
                                        
                                        JToken creationTimeValue2 = runbookValue["CreationTime"];
                                        if (creationTimeValue2 != null && creationTimeValue2.Type != JTokenType.Null)
                                        {
                                            DateTime creationTimeInstance2 = ((DateTime)creationTimeValue2);
                                            runbookInstance.CreationTime = creationTimeInstance2;
                                        }
                                        
                                        JToken lastModifiedTimeValue2 = runbookValue["LastModifiedTime"];
                                        if (lastModifiedTimeValue2 != null && lastModifiedTimeValue2.Type != JTokenType.Null)
                                        {
                                            DateTime lastModifiedTimeInstance2 = ((DateTime)lastModifiedTimeValue2);
                                            runbookInstance.LastModifiedTime = lastModifiedTimeInstance2;
                                        }
                                        
                                        JToken lastModifiedByValue = runbookValue["LastModifiedBy"];
                                        if (lastModifiedByValue != null && lastModifiedByValue.Type != JTokenType.Null)
                                        {
                                            string lastModifiedByInstance = ((string)lastModifiedByValue);
                                            runbookInstance.LastModifiedBy = lastModifiedByInstance;
                                        }
                                        
                                        JToken descriptionValue = runbookValue["Description"];
                                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance = ((string)descriptionValue);
                                            runbookInstance.Description = descriptionInstance;
                                        }
                                        
                                        JToken isApiOnlyValue = runbookValue["IsApiOnly"];
                                        if (isApiOnlyValue != null && isApiOnlyValue.Type != JTokenType.Null)
                                        {
                                            bool isApiOnlyInstance = ((bool)isApiOnlyValue);
                                            runbookInstance.IsApiOnly = isApiOnlyInstance;
                                        }
                                        
                                        JToken isGlobalValue = runbookValue["IsGlobal"];
                                        if (isGlobalValue != null && isGlobalValue.Type != JTokenType.Null)
                                        {
                                            bool isGlobalInstance = ((bool)isGlobalValue);
                                            runbookInstance.IsGlobal = isGlobalInstance;
                                        }
                                        
                                        JToken publishedRunbookVersionIDValue = runbookValue["PublishedRunbookVersionID"];
                                        if (publishedRunbookVersionIDValue != null && publishedRunbookVersionIDValue.Type != JTokenType.Null)
                                        {
                                            string publishedRunbookVersionIDInstance = ((string)publishedRunbookVersionIDValue);
                                            runbookInstance.PublishedRunbookVersionId = publishedRunbookVersionIDInstance;
                                        }
                                        
                                        JToken draftRunbookVersionIDValue = runbookValue["DraftRunbookVersionID"];
                                        if (draftRunbookVersionIDValue != null && draftRunbookVersionIDValue.Type != JTokenType.Null)
                                        {
                                            string draftRunbookVersionIDInstance = ((string)draftRunbookVersionIDValue);
                                            runbookInstance.DraftRunbookVersionId = draftRunbookVersionIDInstance;
                                        }
                                        
                                        JToken tagsValue = runbookValue["Tags"];
                                        if (tagsValue != null && tagsValue.Type != JTokenType.Null)
                                        {
                                            string tagsInstance = ((string)tagsValue);
                                            runbookInstance.Tags = tagsInstance;
                                        }
                                        
                                        JToken logDebugValue = runbookValue["LogDebug"];
                                        if (logDebugValue != null && logDebugValue.Type != JTokenType.Null)
                                        {
                                            bool logDebugInstance = ((bool)logDebugValue);
                                            runbookInstance.LogDebug = logDebugInstance;
                                        }
                                        
                                        JToken logVerboseValue = runbookValue["LogVerbose"];
                                        if (logVerboseValue != null && logVerboseValue.Type != JTokenType.Null)
                                        {
                                            bool logVerboseInstance = ((bool)logVerboseValue);
                                            runbookInstance.LogVerbose = logVerboseInstance;
                                        }
                                        
                                        JToken logProgressValue = runbookValue["LogProgress"];
                                        if (logProgressValue != null && logProgressValue.Type != JTokenType.Null)
                                        {
                                            bool logProgressInstance = ((bool)logProgressValue);
                                            runbookInstance.LogProgress = logProgressInstance;
                                        }
                                        
                                        JToken schedulesArray = runbookValue["Schedules"];
                                        if (schedulesArray != null && schedulesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken schedulesValue in ((JArray)schedulesArray))
                                            {
                                                Schedule scheduleInstance = new Schedule();
                                                runbookInstance.Schedules.Add(scheduleInstance);
                                                
                                                JToken scheduleIDValue = schedulesValue["ScheduleID"];
                                                if (scheduleIDValue != null && scheduleIDValue.Type != JTokenType.Null)
                                                {
                                                    string scheduleIDInstance = ((string)scheduleIDValue);
                                                    scheduleInstance.Id = scheduleIDInstance;
                                                }
                                                
                                                JToken accountIDValue3 = schedulesValue["AccountID"];
                                                if (accountIDValue3 != null && accountIDValue3.Type != JTokenType.Null)
                                                {
                                                    string accountIDInstance3 = ((string)accountIDValue3);
                                                    scheduleInstance.AccountId = accountIDInstance3;
                                                }
                                                
                                                JToken nameValue = schedulesValue["Name"];
                                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                {
                                                    string nameInstance = ((string)nameValue);
                                                    scheduleInstance.Name = nameInstance;
                                                }
                                                
                                                JToken descriptionValue2 = schedulesValue["Description"];
                                                if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                                {
                                                    string descriptionInstance2 = ((string)descriptionValue2);
                                                    scheduleInstance.Description = descriptionInstance2;
                                                }
                                                
                                                JToken startTimeValue = schedulesValue["StartTime"];
                                                if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                                {
                                                    DateTime startTimeInstance = ((DateTime)startTimeValue);
                                                    scheduleInstance.StartTime = startTimeInstance;
                                                }
                                                
                                                JToken expiryTimeValue = schedulesValue["ExpiryTime"];
                                                if (expiryTimeValue != null && expiryTimeValue.Type != JTokenType.Null)
                                                {
                                                    DateTime expiryTimeInstance = ((DateTime)expiryTimeValue);
                                                    scheduleInstance.ExpiryTime = expiryTimeInstance;
                                                }
                                                
                                                JToken creationTimeValue3 = schedulesValue["CreationTime"];
                                                if (creationTimeValue3 != null && creationTimeValue3.Type != JTokenType.Null)
                                                {
                                                    DateTime creationTimeInstance3 = ((DateTime)creationTimeValue3);
                                                    scheduleInstance.CreationTime = creationTimeInstance3;
                                                }
                                                
                                                JToken lastModifiedTimeValue3 = schedulesValue["LastModifiedTime"];
                                                if (lastModifiedTimeValue3 != null && lastModifiedTimeValue3.Type != JTokenType.Null)
                                                {
                                                    DateTime lastModifiedTimeInstance3 = ((DateTime)lastModifiedTimeValue3);
                                                    scheduleInstance.LastModifiedTime = lastModifiedTimeInstance3;
                                                }
                                                
                                                JToken isEnabledValue = schedulesValue["IsEnabled"];
                                                if (isEnabledValue != null && isEnabledValue.Type != JTokenType.Null)
                                                {
                                                    bool isEnabledInstance = ((bool)isEnabledValue);
                                                    scheduleInstance.IsEnabled = isEnabledInstance;
                                                }
                                                
                                                JToken nextRunValue = schedulesValue["NextRun"];
                                                if (nextRunValue != null && nextRunValue.Type != JTokenType.Null)
                                                {
                                                    DateTime nextRunInstance = ((DateTime)nextRunValue);
                                                    scheduleInstance.NextRun = nextRunInstance;
                                                }
                                                
                                                JToken dayIntervalValue = schedulesValue["DayInterval"];
                                                if (dayIntervalValue != null && dayIntervalValue.Type != JTokenType.Null)
                                                {
                                                    int dayIntervalInstance = ((int)dayIntervalValue);
                                                    scheduleInstance.DayInterval = dayIntervalInstance;
                                                }
                                                
                                                JToken hourIntervalValue = schedulesValue["HourInterval"];
                                                if (hourIntervalValue != null && hourIntervalValue.Type != JTokenType.Null)
                                                {
                                                    int hourIntervalInstance = ((int)hourIntervalValue);
                                                    scheduleInstance.HourInterval = hourIntervalInstance;
                                                }
                                                
                                                JToken odatatypeValue = schedulesValue["odata.type"];
                                                if (odatatypeValue != null && odatatypeValue.Type != JTokenType.Null)
                                                {
                                                    string odatatypeInstance = ((string)odatatypeValue);
                                                    scheduleInstance.ScheduleType = odatatypeInstance;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Update the runbook definition identified by runbookVersionId.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the update runbook version's
        /// runbook definition operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> UpdateRunbookDefinitionAsync(string automationAccount, RunbookVersionUpdateRunbookDefinitionParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.ETag == null)
            {
                throw new ArgumentNullException("parameters.ETag");
            }
            if (parameters.RunbookStream == null)
            {
                throw new ArgumentNullException("parameters.RunbookStream");
            }
            if (parameters.RunbookVersionId == null)
            {
                throw new ArgumentNullException("parameters.RunbookVersionId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "UpdateRunbookDefinitionAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/OaaSCS/resources/";
            url = url + "automation";
            url = url + "/~/Accounts/";
            url = url + Uri.EscapeDataString(automationAccount);
            url = url + "/RunbookVersions(guid'";
            url = url + Uri.EscapeDataString(parameters.RunbookVersionId);
            url = url + "')/$value";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-03-13_Preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.TryAddWithoutValidation("If-Match", parameters.ETag);
                httpRequest.Headers.Add("MaxDataServiceVersion", "3.0");
                httpRequest.Headers.Add("MinDataServiceVersion", "3.0");
                httpRequest.Headers.Add("x-ms-version", "2013-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                Stream requestContent = parameters.RunbookStream;
                httpRequest.Content = new StreamContent(requestContent);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/octet-stream");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
